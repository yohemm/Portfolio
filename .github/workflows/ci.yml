name: Continous Intergration

on:
  push:
    branches:
    - master
    - v2
  pull_request:
    branches:
    - master
    - v2

jobs:


#### CI Check up and build artifact

  ci-and-build-artifact:
    runs-on: ubuntu-latest
    steps:
      # Recup les fichiers de travaille
      - uses: actions/checkout@v4
      
      # utilise node
      - name: Use Node.js  22
        uses: actions/setup-node@v4
        with:
          node-version: 22
        # execute des commandes
      - name: Clean install NPM
        run: npm ci

      - name: Install Dependencies
        run: npm install --legacy-peer-deps
      
      - name: Check Type
        run: npm run typecheck

      - name: Build App
        run: npm run build
      
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: build/


#### setup github-packages registry image

  build-image-github:
    runs-on: ubuntu-latest
    
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}

    # changer de repertoire de travail
    # defaults:
    #   run:
    #     working-directory:

    permissions: 
      packages: write
      contents: read
      
    steps:
      # Recup les fichiers de travaille
      - uses: actions/checkout@v4
      
      # utilise node
      - name: Login in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      
      - name: Build the docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/portfolio:${{ github.ref_name }}




#### docker hub image registry pipeline

  build-image-dockerhub:
    permissions: 
      contents: read
    runs-on: ubuntu-latest
    # needs: checkup
    steps:
      # - name: Download Build Artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: build
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: DEBUG
        run: |
          echo `ls`
          echo `pwd`

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: Build and test
      #   uses: docker/build-push-action@v6
      #   with:
      #     target: build

      #     load: true
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          # context: "{{defaultContext}}:build"
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/portfolio:latest
          # tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest





#### set-up github-page

  deploy-github-page:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
    - id: build-publish
      uses: bitovi/github-actions-react-to-github-pages@v1.2.4
      with:
        path: build # change to your build folder



#### VPS Pipeline


  deploy-server:
    runs-on: ubuntu-latest
    needs: ci-and-build-artifact
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files with SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "*,*/,!.DS_Store,!/node_modules/,!/.react-router/,!/build/"
          target: /VPS_v2/Projets/portfolio/
          strip_components: 0 

      # - name: Deploy to VPS
      #   uses: appleboy/ssh-action@v1.2.0
      #   with:
      #     host: ${{ secrets.VPS_IP }}
      #     username: ${{ secrets.VPS_USER }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       cd /VPS_v2/Projets/portfolio/
      #       docker-compose down || true
      #       docker-compose pull
      #       docker-compose up --build -d
      #       docker-compose image prune -f
      #       docker-compose ps
